<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tweety</name>
    </assembly>
    <members>
        <member name="T:Tweety.Authentication.AuthHeaderBuilder">
            <summary>
            Twitter Authentication helper.
            </summary>
        </member>
        <member name="M:Tweety.Authentication.AuthHeaderBuilder.Build(Tweety.Authentication.TweetyAuthContext,System.Net.Http.HttpMethod,System.String)">
            <summary>
            Returns a ready 'OAuth ..' prefixed header to set in any call to Twitter API.
            </summary>
            <param name="authContext">Twitter app auth context.</param>
            <param name="method">The Request Http method.</param>
            <param name="requestUrl">The Request uri along with any query parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Tweety.Authentication.TweetyAuthContext">
            <summary>
            Required for any action, this represents the current user context.
            </summary>
        </member>
        <member name="P:Tweety.Authentication.TweetyAuthContext.IsValid">
            <summary>
            Read-only property to check if this auth data is valid or not.
            </summary>
        </member>
        <member name="M:Tweety.DirectMessageSender.Send(System.String,System.String)">
            <summary>
            Send a direct message to User from the current user (using AuthContext).
            </summary>
            <param name="toScreenName">To (screen name without '@' sign)</param>
            <param name="messageText">Message Text to send.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Tweety.Models.Result`1">
            <summary>
            Wrapper to wrap any result for better errors underdstanding.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Tweety.Webhooks.SubscriptionsManager">
            <summary>
            This class will help in managing the webhook subscription.
            </summary>
        </member>
        <member name="M:Tweety.Webhooks.SubscriptionsManager.Subscribe(System.String)">
            <summary>
            Subscribe current user (from the auth context) to a webhook by Id.
            </summary>
            <param name="webhookId">Webhook Id to subscribe to.</param>
            <returns></returns>
        </member>
        <member name="M:Tweety.Webhooks.SubscriptionsManager.CheckSubscription(System.String)">
            <summary>
            Checks if the current user (from the auth context) is subscribed to a webhook by Id.
            </summary>
            <param name="webhookId">Webhook Id to check against.</param>
            <returns></returns>
        </member>
        <member name="M:Tweety.Webhooks.SubscriptionsManager.Unsubscribe(System.String)">
            <summary>
            Unsubscribe current user (from the auth context) from a webhook by Id.
            </summary>
            <param name="webhookId">Webhook Id to unsubscribe from.</param>
            <returns></returns>
        </member>
        <member name="T:Tweety.Webhooks.WebhookInterceptor">
            <summary>
            This class is responsible to intercept incoming requests to the server
            and handle them properly.
            </summary>
        </member>
        <member name="P:Tweety.Webhooks.WebhookInterceptor.ConsumerSecret">
            <summary>
            Twitter App Consumer Secret.
            Used to Hash incoming/ outgoing data.
            </summary>
        </member>
        <member name="M:Tweety.Webhooks.WebhookInterceptor.InterceptIncomingRequest(System.Net.Http.HttpRequestMessage,System.Action{Tweety.Models.DirectMessageEvent})">
            <summary>
            Intercept incoming requests to the server to handle them, Currently:
                - Challenge Response Check.
                - Incoming DirectMessage.
            </summary>
            <param name="requestMessage">Thr request message object you recieved.</param>
            <param name="OnDirectMessageRecieved">If this is an incoming direct message, this callback will be fired along with the message object <see cref="T:Tweety.Models.DirectMessageEvent"/>.</param>
            <returns>
            <see cref="T:System.Boolean"/> true if handled/ false if not.
            <see cref="T:System.Net.Http.HttpResponseMessage"/> If handled, it's good to return this as the server response, if not handled, this message will be 'OK 200' empty response message.
            </returns>
        </member>
        <member name="T:Tweety.Webhooks.WebhooksManager">
            <summary>
            This class will help in managing the webhooks registrations.
            </summary>
        </member>
        <member name="M:Tweety.Webhooks.WebhooksManager.GetRegisteredWebhooks">
            <summary>
            Retrieve a list of <see cref="T:Tweety.Models.Twitter.WebhookRegistration"/> associated with the user (from the auth context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tweety.Webhooks.WebhooksManager.RegisterWebhook(System.String)">
            <summary>
            Register a new webhook url using the current user (from the auth context).
            </summary>
            <param name="url">The webhook url to register.</param>
            <returns></returns>
        </member>
        <member name="M:Tweety.Webhooks.WebhooksManager.UnregisterWebhook(System.String)">
            <summary>
            Unregister a webhook from current user (from the auth context) by Id.
            </summary>
            <param name="webhookId">The Webhook Id to unregister.</param>
            <returns></returns>
        </member>
    </members>
</doc>
